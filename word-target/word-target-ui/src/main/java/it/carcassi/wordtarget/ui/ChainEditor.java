/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package it.carcassi.wordtarget.ui;

import it.carcassi.wordtarget.core.Chain;
import it.carcassi.wordtarget.core.Link;
import it.carcassi.wordtarget.core.LinkType;
import it.carcassi.wordtarget.core.Chain;
import it.carcassi.wordtarget.core.Renderer;
import it.carcassi.wordtarget.core.Word;
import it.carcassi.wordtarget.core.WordDatabase;
import it.carcassi.wordtarget.core.WordTargetLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.Random;
import java.util.function.Function;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import java.util.stream.Collectors;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.UIManager;

/**
 *
 * @author carcassi
 */
public class ChainEditor extends javax.swing.JFrame {

    /** Creates new form ChainEditor */
    public ChainEditor() {
        initComponents();
        prefs = Preferences.userRoot().node(getClass().getName());
        String filename = prefs.get(LAST_USED_DB, null);
        if (filename != null) {
            currentDbFile = new File(filename);
            try (BufferedReader reader = new BufferedReader(new FileReader(currentDbFile))) {
                db = WordDatabase.deserialize(reader);
            } catch (IOException ex) {
                Logger.getLogger(WordDatabaseEditor.class.getName()).log(Level.SEVERE, null, ex);
                db = new WordDatabase();
            }
        } else {
            db = new WordDatabase();
        }
        
        // Prepare the FileChoosers
        chainFileChooser = new JFileChooser(prefs.get(CHAIN_FOLDER, new File(".").getAbsolutePath()));
        exportFileChooser = new JFileChooser(prefs.get(EXPORT_FOLDER, new File(".").getAbsolutePath()));
    }

    private JFileChooser chainFileChooser;
    private JFileChooser exportFileChooser;
    
    private DefaultListModel<Chain> chainsModel = new DefaultListModel<>();
    private DefaultListModel<Word> chainModel = new DefaultListModel<>();
    private DefaultListModel<Link> linksModel = new DefaultListModel<>();

    private Preferences prefs;
    private static String LAST_USED_DB = "LAST_USED_DB";
    private static String CHAIN_FOLDER = "CHAIN_FOLDER";
    private static String EXPORT_FOLDER = "EXPORT_FOLDER";
    private File currentDbFile;
    private File currentChainFile;
    private WordDatabase db;
    private Chain currentChain;
    private boolean dbChanged;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        targetWordField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        chainsList = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectedChainList = new javax.swing.JList<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        nextWordField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        linksList = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        editDbButton = new javax.swing.JButton();
        saveDbButton = new javax.swing.JButton();
        loadChainButton = new javax.swing.JButton();
        saveChainButton = new javax.swing.JButton();
        saveChainAsButton = new javax.swing.JButton();
        exportChainButton = new javax.swing.JButton();
        reverseChainButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        targetWordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetWordFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Target word:");

        chainsList.setModel(chainsModel);
        chainsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                chainsListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(chainsList);

        selectedChainList.setModel(chainModel);
        selectedChainList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                selectedChainListKeyReleased(evt);
            }
        });
        selectedChainList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                selectedChainListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(selectedChainList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );

        jLabel2.setText("Next word:");

        nextWordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextWordFieldActionPerformed(evt);
            }
        });

        linksList.setModel(linksModel);
        linksList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                linksListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(linksList);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextWordField, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextWordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3))
        );

        editDbButton.setText("Edit db...");
        editDbButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDbButtonActionPerformed(evt);
            }
        });

        saveDbButton.setText("Save db");
        saveDbButton.setEnabled(false);
        saveDbButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDbButtonActionPerformed(evt);
            }
        });

        loadChainButton.setText("Load chain...");
        loadChainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadChainButtonActionPerformed(evt);
            }
        });

        saveChainButton.setText("Save chain");
        saveChainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChainButtonActionPerformed(evt);
            }
        });

        saveChainAsButton.setText("Save chain as...");
        saveChainAsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChainAsButtonActionPerformed(evt);
            }
        });

        exportChainButton.setText("Export...");
        exportChainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportChainButtonActionPerformed(evt);
            }
        });

        reverseChainButton.setText("Reverse chain");
        reverseChainButton.setEnabled(false);
        reverseChainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reverseChainButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editDbButton)
                    .addComponent(saveDbButton)
                    .addComponent(loadChainButton)
                    .addComponent(saveChainButton)
                    .addComponent(saveChainAsButton)
                    .addComponent(exportChainButton)
                    .addComponent(reverseChainButton))
                .addGap(0, 5, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(editDbButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveDbButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reverseChainButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadChainButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveChainButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveChainAsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportChainButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(targetWordField, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(targetWordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                        .addGap(32, 32, 32))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editDbButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDbButtonActionPerformed
        WordDatabaseEditor dbEditor = new WordDatabaseEditor();
        dbEditor.setCurrentFile(currentDbFile);
        dbEditor.setDb(db);
        dbEditor.setModal(true);
        dbEditor.setVisible(true);
        setCurrentDbFile(dbEditor.getCurrentFile());
        db = dbEditor.getDb();
    }//GEN-LAST:event_editDbButtonActionPerformed

    private void targetWordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetWordFieldActionPerformed
        createNewChain(Word.of(targetWordField.getText()));
    }//GEN-LAST:event_targetWordFieldActionPerformed

    private void chainsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_chainsListValueChanged
        setCurrentChain(chainsList.getSelectedValue());
    }//GEN-LAST:event_chainsListValueChanged

    private void selectedChainListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_selectedChainListValueChanged
        changeCurrentWord(selectedChainList.getSelectedValue());
    }//GEN-LAST:event_selectedChainListValueChanged

    private void linksListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linksListMouseClicked
        if (evt.getClickCount() > 1 && evt.getButton() == MouseEvent.BUTTON1) {
            addLink(linksList.getSelectedValue());
        }
    }//GEN-LAST:event_linksListMouseClicked

    private void nextWordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextWordFieldActionPerformed
        nextWord(Word.of(nextWordField.getText()));
    }//GEN-LAST:event_nextWordFieldActionPerformed

    private void saveDbButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDbButtonActionPerformed
        saveDb();
    }//GEN-LAST:event_saveDbButtonActionPerformed

    private void saveChainAsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChainAsButtonActionPerformed
        int returnVal = chainFileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            saveCurrentChainAs(chainFileChooser.getSelectedFile());
        }
    }//GEN-LAST:event_saveChainAsButtonActionPerformed

    private void exportChainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportChainButtonActionPerformed
        int returnVal = exportFileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            exportChainAs(exportFileChooser.getSelectedFile());
            try {
                Process proc = Runtime.getRuntime().exec("cmd /c start " + exportFileChooser.getSelectedFile().getPath());
            } catch (IOException ex) {
                Logger.getLogger(ChainEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_exportChainButtonActionPerformed

    private void selectedChainListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_selectedChainListKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            removeLastLink();
        }
    }//GEN-LAST:event_selectedChainListKeyReleased

    private void loadChainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadChainButtonActionPerformed
        int returnVal = chainFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            loadChain(chainFileChooser.getSelectedFile());
        }
    }//GEN-LAST:event_loadChainButtonActionPerformed

    private void saveChainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChainButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveChainButtonActionPerformed

    private void reverseChainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reverseChainButtonActionPerformed
        if (currentChain != null) {
            reverseCurrentChain();
        }
    }//GEN-LAST:event_reverseChainButtonActionPerformed

    public Word getCurrentSelectedWord() {
        int index = selectedChainList.getSelectedIndex();
        return currentChain.words().get(index);
    }
    
    public void setCurrentDbFile(File currentFile) {
        this.currentDbFile = currentFile;
        if (currentFile != null) {
            prefs.put(LAST_USED_DB, currentFile.getPath());
        }
    }

    public void setCurrentChainFile(File currentChainFile) {
        this.currentChainFile = currentChainFile;
        if (currentChainFile != null) {
            prefs.put(CHAIN_FOLDER, currentChainFile.getPath());
            saveChainButton.setEnabled(true);
        }
    }

    public void createNewChain(Word targetWord) {
        if (targetWord == null) {
            return;
        }
        addNewWordToDb(targetWord);
        addNewChain(new Chain(targetWord));
    }
    
    private void addNewChain(Chain newChain) {
        chainsModel.addElement(newChain);
        chainsList.setSelectedIndex(chainsModel.size() - 1);
        selectedChainList.setSelectedIndex(chainModel.size() - 1);
    }
    
    private void addNewWordToDb(Word newWord) {
        if (!db.containsWord(newWord)) {
            db.addWord(newWord);
            setDbChanged(true);
        }
    }

    public void setCurrentChain(Chain chain) {
        this.currentChain = chain;
        chainModel.clear();
        reverseChainButton.setEnabled(chain != null);
        if (chain != null) {
            for (Word word : chain.words()) {
                chainModel.addElement(word);
            }
        }
    }

    public void changeCurrentWord(Word currentWord) {
        linksModel.clear();
        linksModel.addAll(db.getLinksFor(currentWord, currentChain.words()).stream()
                .sorted(Comparator.comparing(x -> x.getWordB().getText()))
                .collect(Collectors.toList()));
    }
    
    public void reverseCurrentChain() {
        currentChain.reverse();
        chainsModel.set(chainsModel.indexOf(currentChain), currentChain);
        setCurrentChain(currentChain);
    }
    
    public void addLink(Link link) {
        int index = selectedChainList.getSelectedIndex();
        if (index == currentChain.size() -1) {
            currentChain.add(link);
            chainsModel.set(chainsModel.indexOf(currentChain), currentChain);
            setCurrentChain(currentChain);
            selectedChainList.setSelectedIndex(currentChain.words().size() - 1);
        } else {
            Chain newChain = new Chain(currentChain.getInitialWord());
            for (int i = 0; i < index; i++) {
                newChain.add(currentChain.links().get(i));
            }
            newChain.add(link);
            chainsModel.addElement(newChain);
            chainsList.setSelectedIndex(chainsModel.size() - 1);
            selectedChainList.setSelectedIndex(currentChain.words().size() - 1);
        }
    }
    
    public void removeLastLink() {
        if (currentChain != null && currentChain.size() > 1) {
            currentChain.removeLast();
            chainsModel.set(chainsModel.indexOf(currentChain), currentChain);
            setCurrentChain(currentChain);
            selectedChainList.setSelectedIndex(currentChain.words().size() - 1);
        }
    }

    private void nextWord(Word nextWord) {
        if (!db.containsWord(nextWord)) {
            db.addWord(nextWord);
            setDbChanged(true);
        }
        if (!db.containsLink(getCurrentSelectedWord(), nextWord)) {
            Object[] options = { LinkType.WordAssociation, LinkType.Synonym, LinkType.Antonym, "CANCEL" };
            int choice = JOptionPane.showOptionDialog(this, "Select link type", "New Link...",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,
                    null, options, options[0]);
            if (choice < 0 || choice > 2) {
                return;
            }
            db.addLink(new Link(getCurrentSelectedWord(), nextWord, (LinkType) options[choice]));
            setDbChanged(true);
        }
        addLink(db.getLinkBetween(getCurrentSelectedWord(), nextWord));
    }

    public void setDbChanged(boolean dbChanged) {
        this.dbChanged = dbChanged;
        saveDbButton.setEnabled(dbChanged && currentDbFile != null);
    }
    
    private void saveDb() {
        if (!dbChanged || currentDbFile == null) {
            throw new IllegalStateException("Shouldn't be able to save db if not changed or no valid file was chosen");
        }
        
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(currentDbFile))) {
            db.serialize(writer);
            setDbChanged(false);
        } catch (Exception ex) {
            Logger.getLogger(ChainEditor.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
    
    private void saveCurrentChainAs(File file) {
        setCurrentChainFile(file);
        if (file != null) {
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                currentChain.serialize(writer);
            } catch (IOException ex) {
                Logger.getLogger(WordDatabaseEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void loadChain(File file) {
        setCurrentChainFile(file);
        if (file != null) {
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                Chain newChain = Chain.deserialize(reader);
                addNewChain(newChain);
            } catch (IOException ex) {
                Logger.getLogger(WordDatabaseEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void exportChainAs(File file) {
        if (file != null) {
            prefs.put(EXPORT_FOLDER, file.getPath());
            
            File solutionFile = new File(file.getParentFile(), file.getName().substring(0, file.getName().length() - 4) + ".txt");
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                List<String> words = new ArrayList<>(currentChain.words().stream().map(x -> x.getText()).collect(Collectors.toList()));
                Collections.reverse(words);
                WordTargetLayout layout = new WordTargetLayout(words);
                layout.doLayout(new Random());
                writer.write(Renderer.renderWordTarget(layout));
                writer.flush();
            } catch (IOException ex) {
                Logger.getLogger(WordDatabaseEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(solutionFile))) {
                List<String> words = new ArrayList<>(currentChain.words().stream().map(x -> x.getText()).collect(Collectors.toList()));
                Collections.reverse(words);
                writer.write(words.get(0));
                for (int i = 1; i < words.size(); i++) {
                    writer.write("\n");
                    writer.write(words.get(i));
                }
                writer.flush();
            } catch (IOException ex) {
                Logger.getLogger(WordDatabaseEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WordDatabaseEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChainEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<it.carcassi.wordtarget.core.Chain> chainsList;
    private javax.swing.JButton editDbButton;
    private javax.swing.JButton exportChainButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<Link> linksList;
    private javax.swing.JButton loadChainButton;
    private javax.swing.JTextField nextWordField;
    private javax.swing.JButton reverseChainButton;
    private javax.swing.JButton saveChainAsButton;
    private javax.swing.JButton saveChainButton;
    private javax.swing.JButton saveDbButton;
    private javax.swing.JList<Word> selectedChainList;
    private javax.swing.JTextField targetWordField;
    // End of variables declaration//GEN-END:variables

}
